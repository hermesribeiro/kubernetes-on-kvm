version: 3

dotenv: ['secrets.env']

vars:
  MEMORY: 3000
  VCPU: 2
  DISK_SIZE: 20
  BRIDGE_NAME: br0
  GATEWAY_IP: 192.168.0.1
  LOADBALANCER_IP: 192.168.0.80
  NODE01_IP: 192.168.0.81
  NODE02_IP: 192.168.0.82
  NODE03_IP: 192.168.0.83
  STARTUP_WAIT_TIME: 30

tasks:
  install:
    cmds:
      - sudo apt-get install qemu-kvm virt-manager virtinst libvirt-clients bridge-utils libvirt-daemon-system -y
      - sudo systemctl enable --now libvirtd
      - sudo systemctl start libvirtd
      - sudo systemctl status libvirtd
      - sudo usermod -aG kvm $USER
      - sudo usermod -aG libvirt $USER
      - echo You should reboot before proceeding

  dowload-image:
    cmds:
      - wget https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img

  create-machine:
    cmds:
      - |
        sed \
        -e 's/HOST_NAME/{{.NAME}}/g' \
        -e 's/SSH_IMPORT_ID/{{.SSH_IMPORT_ID}}/' \
        -e 's@PASSWD_HASH@{{.PASSWD_HASH}}@g' \
        user-data.yaml > configs/{{.NAME}}-user-data.yaml
      - |
        sed \
        -e 's/NODE_IP/{{.NODE_IP}}/g' \
        -e 's/GATEWAY_IP/{{.GATEWAY_IP}}/g' \
        network-config.yaml > configs/{{.NAME}}-network-config.yaml
      - |
        virt-install --name {{.NAME}} --memory {{.MEMORY}} --vcpus {{.VCPU}} \
          --os-variant detect=on,name=ubuntujammy \
          --disk=size={{.DISK_SIZE}},backing_store="$(pwd)/jammy-server-cloudimg-amd64.img" \
          --cloud-init user-data=configs/{{.NAME}}-user-data.yaml,network-config=configs/{{.NAME}}-network-config.yaml \
          --network bridge={{.BRIDGE_NAME}},model=virtio \
      - virsh start {{.NAME}}

  delete-machine:
    cmds:
      - virsh destroy {{.NAME}} || true
      - virsh undefine --domain {{.NAME}} || true
      - sudo rm /var/lib/libvirt/images/{{.NAME}}.qcow2 || true

  prepare-control-plane-node:
    cmds:
      - scp scripts/* {{.NODE_IP}}:/home/sobeck
      - ssh {{.NODE_IP}} bash pre.sh
      - ssh {{.NODE_IP}} bash vip.sh {{.NODE_IP}} {{.LOADBALANCER_IP}} {{.PEER1_IP}} {{.PEER2_IP}}

  init-control-plane-node:
    cmds:
      - task: prepare-control-plane-node
        vars:
          NODE_IP: '{{.NODE_IP}}'
          PEER1_IP: '{{.PEER1_IP}}'
          PEER2_IP: '{{.PEER2_IP}}'
      - ssh {{.NODE_IP}} bash init.sh {{.LOADBALANCER_IP}}
      - ssh {{.NODE01_IP}} kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule- || true
    vars:
      NODE_IP: '{{.NODE_IP}}'
      PEER1_IP: '{{.PEER1_IP}}'
      PEER2_IP: '{{.PEER2_IP}}'

  bootstrap-control-plane-node:
    cmds:
      - task: prepare-control-plane-node
        vars:
          NODE_IP: '{{.NODE_IP}}'
          PEER1_IP: '{{.PEER1_IP}}'
          PEER2_IP: '{{.PEER2_IP}}'
      - ssh {{.NODE01_IP}} bash join.sh | xargs -I% ssh {{.NODE_IP}} sudo %
      - ssh {{.NODE01_IP}} kubectl taint nodes --all node-role.kubernetes.io/control-plane:NoSchedule- || true
    vars:
      NODE_IP: '{{.NODE_IP}}'
      PEER1_IP: '{{.PEER1_IP}}'
      PEER2_IP: '{{.PEER2_IP}}'

  create-machine-1:
    cmds:
      - task: create-machine
        vars:
          NAME: node01
          NODE_IP: '{{.NODE01_IP}}'

  create-machine-2:
      - task: create-machine
        vars:
          NAME: node02
          NODE_IP: '{{.NODE02_IP}}'

  create-machine-3:
      - task: create-machine
        vars:
          NAME: node03
          NODE_IP: '{{.NODE03_IP}}'

  delete-machine-1:
    cmds:
      - task: delete-machine
        vars:
          NAME: node01

  delete-machine-2:
      - task: delete-machine
        vars:
          NAME: node02

  delete-machine-3:
      - task: delete-machine
        vars:
          NAME: node03

  node-1:
    cmds:
      - task: init-control-plane-node
        vars:
          NODE_IP: '{{.NODE01_IP}}'
          PEER1_IP: '{{.NODE02_IP}}'
          PEER2_IP: '{{.NODE03_IP}}'

  node-2:
    cmds:
      - task: bootstrap-control-plane-node
        vars:
          NODE_IP: '{{.NODE02_IP}}'
          PEER1_IP: '{{.NODE01_IP}}'
          PEER2_IP: '{{.NODE03_IP}}'

  node-3:
    cmds:
      - task: bootstrap-control-plane-node
        vars:
          NODE_IP: '{{.NODE03_IP}}'
          PEER1_IP: '{{.NODE01_IP}}'
          PEER2_IP: '{{.NODE02_IP}}'

  e2e-node-1:
    cmds:
      - task: delete-machine-1
      - task: create-machine-1
      - sleep {{.STARTUP_WAIT_TIME}}
      - task: node-1

  e2e-node-2:
    cmds:
      - task: delete-machine-2
      - task: create-machine-2
      - sleep {{.STARTUP_WAIT_TIME}}
      - task: node-2

  e2e-node-3:
    cmds:
      - task: delete-machine-3
      - task: create-machine-3
      - sleep {{.STARTUP_WAIT_TIME}}
      - task: node-3

  e2e:
    cmds:
      - task: e2e-node-1
      - task: e2e-node-2
      - task: e2e-node-3

  delete-all:
    cmds:
      - task: delete-machine-1
      - task: delete-machine-2
      - task: delete-machine-3

  create-kubeconfig:
    cmds:
      - mkdir -p ~/.kube
      - cp ~/.kube/config ~/.kube/config-backup
      - ssh {{.NODE01_IP}} sudo kubeadm kubeconfig user --client-name=sobeck > /tmp/sobeck.conf
      - ssh {{.NODE01_IP}} kubectl create clusterrolebinding sobeck-cluster-admin-binding --clusterrole=cluster-admin --user=sobeck
      - KUBECONFIG=~/.kube/config:/tmp/sobeck.conf kubectl config view --flatten > ~/.kube/config
      - kubectl config set-cluster kubernetes --server=https://{{.LOADBALANCER_IP}}:6443
